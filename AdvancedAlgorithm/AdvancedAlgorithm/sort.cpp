#include "sort.h"
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;
using std::vector;
/****************文件说明*********************
* 文件名：sort.cpp
* 文件功能：排序算法的实现
* 实现方法：十大经典排序算法
*			比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破 O(nlogn)，被称为非线性时间比较类排序；
				交换排序（1、冒泡排序；2、快速排序）
				插入排序（3、简单插入排序；4、希尔排序）
				选择排序（5、简单选择排序；6、堆排序）
				归并排序（7、二路归并排序；8、多路归并排序）
			非比较排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此被称为线性时间非比较类排序。
				9、计数排序；
				10、桶排序；
				11、基数排序。

* 相关概念：
			稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。
			不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。
			时间复杂度;对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。
			空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。


**/

/************函数说明***********
* 函数名：BubbleSort(vector vec)
* 函数参数：待排序的整数数组
* 函数返回值：无。通过引用传参，将已排好序的数组替换掉原来没有排序的数组
* 函数功能：实现对输入数组的排序
* 函数算法：冒泡排序
			重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
				1、比较相邻的元素。如果第一个比第二个大，就交换它们两个；
				2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；
				3、针对所有的元素重复以上的步骤，除了最后一个；
				4、重复步骤1~3，直到排序完成。
* 时间复杂度： 平均O(n^2)，最好O(n)，最坏O(n^2)
**/

void BubbleSort(vector <int> &vec)
{
	int count = vec.size();  // 记录比较的轮数
	for (int j = 0; j < count; ++j)
	{
		// 对每个元素从第一个到已排序的数比较一次
		for (int i = 0; i < count - 1; ++i)
		{
			if (vec[i] > vec[i + 1])
				swap(vec[i], vec[i + 1]);  // 比较两个相邻的数，小数放在大数前面
		}  // 每完成一轮，便多一个已排序好的数，即这一轮的最后一个，便可以减少一个数的比较

		count -= 1;
	}	
}

/************函数说明***********
* 函数名：SelectionSort(vector vec)
* 函数参数：待排序的整数数组
* 函数返回值：无。通过引用传参，将已排好序的数组替换掉原来没有排序的数组
* 函数功能：实现对输入数组的排序
* 函数算法：选择排序：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，
			然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 
				1、初始状态：无序区为R[1..n]，有序区为空；
				2、第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。
				该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，
				使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；
				3、n-1趟结束，数组有序化了。
* 时间复杂度： O(n^2)，最好最坏情况都是O(n^2)。最稳定的算法之一
**/
void SelectionSort(int *vec, int len)
{
	// int len = vec.size();
	int temp_min = 0;  // 定义变量，记录最小值的索引
	// 比较n-1轮
	for (int i = 0; i < len; ++i)
	{		
		// 每一轮找最小值的索引，起始值为i，因为前i-1个已经排好序了
		temp_min = i;
		for (int j = i + 1; j < len; ++j)
		{
			if (vec[temp_min] > vec[j])  // vec[i]已经被记录，所以j=i+1即可
				temp_min = j;  // 记录最小值的索引
		}
		swap(vec[temp_min], vec[i]);  // 将最小值与第i个数交换，此时前i个都排好序了
	}
}

/************函数说明***********
* 函数名：InsertionSort(vector vec)
* 函数参数：待排序的整数数组
* 函数返回值：无。通过引用传参，将已排好序的数组替换掉原来没有排序的数组
* 函数功能：实现对输入数组的排序
* 函数算法：交换排序：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入
			1、从第一个元素开始，该元素可以认为已经被排序；
			2、取出下一个元素，在已经排序的元素序列中从后向前扫描；
			3、如果该元素（已排序）大于新元素，将该元素移到下一位置；
			4、重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；
			5、将新元素插入到该位置后；
			6、重复步骤2~5
* 时间复杂度： O(n)
**/
void InsertionSort(vector<int> &vec)
{
	int temp = vec[1];
	for (int i = 1; i < vec.size(); ++i)
	{
		temp = vec[i];
		vec.erase(remove(vec.begin() + i, vec.begin() + i, 1));
		for (int j = i-1; j >= 0; --j)
		{
			if (temp > vec[j])
			{
				vec.insert(vec.begin() + j + 1, temp);
				break;
			}
			else if(j == 0)
				vec.insert(vec.begin(), temp);
		}
	}
}




